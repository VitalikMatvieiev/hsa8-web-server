# Define the caching path within the http block
    # Define the events section with default settings
    events {
        worker_connections 1024;  # Adjust the number of connections as needed
    }

http {

    # Define a caching zone for images that have been requested at least twice
    proxy_cache_path /var/cache/nginx/images_cache levels=1:2 keys_zone=images_cache:1m inactive=1m;

    upstream local {
        server 127.0.0.1:8080;
    }
        server {
        listen 8080;
        server_name localhost;

        root /Users/vitalijmatveev/RiderProjects/web-server/images;
    }

    server {
        listen 80;

        location / {
            add_header X-Cache-Status $upstream_cache_status always;
        }
        location ~* \.(jpg|jpeg|png|gif|ico)$ {
            proxy_pass http://local;
            proxy_cache images_cache;
            proxy_cache_valid 200 302 10m;
            proxy_cache_valid 404 1m;
            proxy_cache_min_uses 2;
            add_header X-Cache-Status $upstream_cache_status always;
        }

        # Define the location block for caching images
        #location ~* \.(jpg|jpeg|png|gif)$ {

        # location /images/ {
        #     root /Users/vitalijmatveev/RiderProjects/web-server;
        #     add_header X-Cache-Status $upstream_cache_status always;
        #     proxy_cache images_cache; 
        #     proxy_cache_key $request_uri;
        #     #proxy_cache_valid 200 302 10m;  # Cache valid responses for 10 minutes
        #     proxy_cache_use_stale updating;
        #     proxy_pass http://local; # where to get original
        #     proxy_cache_valid any 1m;

        #     # Set the number of times a file should be requested before caching
        #     proxy_cache_min_uses 2;
        # }


        # Define other location blocks or server configurations as needed
    }

    server {
        listen 5001;

        location / {
            add_header X-Cache-Status $upstream_cache_status always;
        }
        # Define other location blocks or server configurations as needed
    }
}
